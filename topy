#!/usr/bin/python2

import os, sys, time
import curses

pos_y = 0
tree  = 1
mem_total = int(filter(len, open('/proc/meminfo').readlines()[0].split(' '))[1])
INDENT_STR      = '  '
SYSCONF_CLK_TCK = os.sysconf('SC_CLK_TCK')

def head(fnam):
	f = open(fnam)
	ret = f.readline()
	f.close()
	return ret

def owner(path):
	return os.stat(path).st_uid

def cpuusage(root):
	return 0


class Proc:
	def __init__(self, pid):
		self.initfields(pid)
		self.refresh()

	def __str__(self):
		return ("{ pid: %d, ppid: %d, cmdline: \"%s\", uid: %d, cpu: %d, mem: %d, state: %s, " + \
						"time: %d, tty: %d, pgrp: %d }") % (
						self.pid, self.ppid,  self.cmdline, self.uid, self.cpu,
						self.mem, self.state, self.time,    self.tty, self.pgrp)

	def initfields(self, pid):
		self.pid         = int(pid)
		self.is_alive    = True
		self.uid         = 0
		self.cmdline     = ''
		self.ppid        = 0
		self.state       = 0
		self.time        = 0
		self.tty         = 0
		self.pgrp        = 0
		self.cpu         = 0
		self.mem         = 0
		self.mem_percent = 0
		self.cpu_percent = 0

	def refresh(self):
		root = "/proc/%d" % self.pid

		if not self.is_alive:
			return

		try:
			stat         = head("%s/stat" % root)

			self.uid     = owner(root)
			self.cmdline = head("%s/cmdline" % root).replace("\0", " ")
			if len(self.cmdline) == 0:
				self.cmdline = stat[stat.find('(')+2:stat.find(')')]

			stat         = stat[stat.find(')')+3:]
			stats        = stat.split(' ')

			self.ppid    = int(stats[1])
			self.state   = str(stats[0])
			self.time    = self.time(stats[11]) # usermode time
			self.tty     = int(stats[4])
			self.pgrp    = int(stats[5])

			self.cpu     = cpuusage(root)
			self.mem     = int(head("%s/statm" % root).split(' ')[0])


			global mem_total
			self.mem_percent = 100.0 * float(self.mem) / float(mem_total)
			self.cpu_percent = 0 # FIXME

		except Exception as e:
			print >>sys.stderr, '%s construct-dying: %s' % (self.cmdline.split(' ')[0], e)
			self.is_alive = False

	def time(self, i):
		global SYSCONF_CLK_TCK
		jiffytime = 1.0 / float(SYSCONF_CLK_TCK)
		time = int(float(i) * jiffytime)

		hours =  time / 3600
		mins  = (time / 60) % 60
		secs  = time % 60

		return "%02d:%02d.%02d" % (hours, mins, secs)

	def alive(self):
		if not self.is_alive:
			return False

		try:
			os.stat("/proc/%d" % self.pid)
		except Exception as e:
			kelf.is_alive = False
		return self.is_alive

	def kernelthread(self):
		return self.ppid == 2 or self.pid == 2 # owned by kthreadd


def proc_new(current):
	ents = os.listdir('/proc')
	new = []

	for e in ents:
		if e.isdigit():
			new_one = Proc(e)
			if new_one.kernelthread():
				continue

			found = False
			for c in current:
				if c.pid == new_one.pid:
					found = True
					break
			if not found:
				new.append(new_one)

	return new


def proc_update(procs):
	for p in procs:
		p.refresh()

	procs.extend(proc_new(procs))

	for p in procs[:]:
		if not p.alive():
			procs.remove(p)


def proc_first(procs):
	for p in procs:
		if p.pid == 1:
			return p
	return None

def proc_next(procs, used):
	for p in procs:
		if p.ppid == used.pid:
			return p

	if len(procs):
		return procs[0]
	return None

def proc_childlvl(procs, child):
	if child.ppid <= 1:
		return 0

	for p in procs:
		if p.pid == child.ppid:
			return 1 + proc_childlvl(procs, p)

	return 0

def header(procs):
	global stdscr

	for y in range(0, stdscr.getmaxyx()[0]):
		stdscr.move(y, 0)
		stdscr.clrtoeol()

	uid = os.getuid()
	mine = 0

	for p in procs:
		if p.uid == uid:
			mine += 1

	stdscr.move(0, 0)
	try:
		stdscr.addstr("%d processes, %d by %d\n" % (len(procs), mine, uid))
		stdscr.addstr("   PID   PPID   PGRP    TTY    UID NI S   Time  Mem    Cpu   User Cmd\n");
	except:
		pass


def body(procs):
	global stdscr, INDENT_STR, pos_y
	y = 2

	size = stdscr.getmaxyx()
	maxy = size[0]
	maxx = size[1]

	queue  = procs[:]
	sorted = []

	p = proc_first(queue)
	while len(queue):
		queue.remove(p)
		sorted.append([p, proc_childlvl(procs, p)])
		p = proc_next(queue, p)

	for i in range(pos_y, len(sorted)):
		if y > maxy:
			break

		p      = sorted[i][0]
		indent = sorted[i][1]

		s = (
				"% 6d % 6d % 6d % 6d % 6d % 2d %s" + \
				"% 8s % 3d%% % 3d%% % 6d %s%s\n"
				) % (
				p.pid, p.ppid, p.pgrp, p.tty, p.uid, 0, p.state,
				p.time, p.mem_percent, p.cpu_percent, p.uid,
				INDENT_STR * indent, p.cmdline
				)

		try:
			stdscr.move(y, 0)
			stdscr.addstr(s[:maxx])
		except:
			pass

		y += 1



SLEEP_TIME = 3

try:
	stdscr = curses.initscr()

	curses.start_color()
	curses.use_default_colors()
	curses.init_pair(curses.COLOR_BLACK,   -1,                   -1)
	curses.init_pair(curses.COLOR_GREEN,   curses.COLOR_GREEN,   -1)
	curses.init_pair(curses.COLOR_WHITE,   curses.COLOR_WHITE,   -1)
	curses.init_pair(curses.COLOR_RED,     curses.COLOR_RED,     -1)
	curses.init_pair(curses.COLOR_CYAN,    curses.COLOR_CYAN,    -1)
	curses.init_pair(curses.COLOR_MAGENTA, curses.COLOR_MAGENTA, -1)
	curses.init_pair(curses.COLOR_BLUE,    curses.COLOR_BLUE,    -1)
	curses.init_pair(curses.COLOR_YELLOW,  curses.COLOR_YELLOW,  -1)

	curses.cbreak()
	curses.noecho()
	stdscr.keypad(1)
	stdscr.timeout(SLEEP_TIME)
except Exception as e:
	print "Couldn't start ncurses: %s" % e
	sys.exit(1)


def main():
	procs = proc_new([])

	update_last = 0
	while True:
		global pos_y, stdscr

		now = time.time()
		if update_last + 1 < now:
			update_last = now
			header(procs)
			body(procs)
			stdscr.move(0, 0)
			proc_update(procs)
			#print >>sys.stderr, "procs (%d):"%len(procs), procs

		c = stdscr.getch()
		if c == -1:
			continue
		elif c == ord('j'):
			pos_y += 1
			if pos_y >= len(procs):
				pos_y = len(procs) - 1
		elif c == ord('k'):
			pos_y -= 1
			if pos_y < 0:
				pos_y = 0
		elif c == ord('q'):
			break

err = ''
try:
	main()
except (Exception, KeyboardInterrupt) as e:
	err = str(e)

curses.nocbreak()
curses.echo()
curses.endwin()

if len(err):
	print >>sys.stderr, err
	sys.exit(1)
